# 启动 nginx
# nginx
#
# 修改配置后, 检查nginx配置是否正确
# nginx -t
#
# 重启 nginx
# nginx -s reload
#
# 关闭 nginx
# nginx -s stop

# [nginx配置入门](http://www.nginx.cn/591.html)
# [nginx配置详解](http://my.oschina.net/duxuefeng/blog/34880?fromerr=dJG6rzyD)
# [h5bp/server-configs-nginx Nginx HTTP server boilerplate configs](https://github.com/h5bp/server-configs-nginx)

# 运行用户
#user  nobody;
# 启动进程,通常设置成和cpu的数量相等
worker_processes  4;
worker_rlimit_nofile 100000;

# 全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

# 工作模式及连接数上限
events {
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式, 但是仅用于linux2.6以上内核, 可以大大提高nginx的性能
    # use epoll;
    # 单个后台worker process进程的最大并发链接数
    worker_connections  4096;
}

# 设定http服务器, 利用它的反向代理功能提供负载均衡支持
http {
    # Server:nginx
    server_tokens off;
    # 在 response header 中会暴露服务器的版本号
    # Server:nginx/1.10.0
    # server_tokens on;

    # 设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    # 设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    # 对于普通应用，必须设为 on,
    # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    # 连接超时时间
    keepalive_timeout  10;
    # tcp_nodelay      on;

    # 设定请求缓冲
    # client_header_buffer_size    128k;
    # large_client_header_buffers  4 128k;

    # 开启gzip压缩
    # 使用gizp压缩并不是没有代价的, 在降低带宽的同时也增加了CPU的使用
    gzip on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    # gzip_static on;
    gzip_proxied any;
    gzip_min_length 1000;
    # 参数取值范围1-9, 9代表最用CPU和1代表最少用CPU, 其默认值是1
    gzip_comp_level 4;
    gzip_types text/plain text/css text/javascript application/json application/x-javascript application/javascript text/xml application/xml application/xml+rss;

    # 负载均衡后由于不同的服务器可能对同一个文件生成不同的 Entity Tag
    # 用户第一次从服务器 A 拿过的文件，第二次从服务器 B 拿时，服务器给出的 Entity Tag 有可能不同
    # 这就会造成重复下载，缓存形同虚设
    etag off;

    # include conf.d/*.conf;

    # 设定负载均衡的服务器列表
    # [Nginx负载均衡](http://www.nginx.cn/817.html)
    upstream apachephp {
        # weigth参数表示权值, 权值越高被分配到的几率越大
        server s1.domain.com:80 weight=2;
        server s2.domain.com:80 weight=1;
    }

    # 设定虚拟主机配置
    server {
        # 侦听80端口
        listen       80;
        # 基于域名的虚拟主机
        # 根据请求头部(Host)的内容, 一个ip的服务器可以配置多个域名
        # 定义使用 localhost 访问
        server_name  localhost;

        #charset koi8-r;

        # 设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        # 默认请求
        # [nginx location匹配规则](http://www.nginx.cn/115.html)
        location / {
            root   F:/site; # 目录分隔符统一使用 "/"
            # 目录列表(directory listing)
            # autoindex on;
            # 定义首页索引文件的名称
            index  index.html;
        }
        # root 与 alias 的区别
        # alias 指定的目录是准确的, root 是指定目录的上级目录, 并且该上级目录要含有 location 指定名称的同名目录
        # 
        # 配置 root 会将 URL 中的 path 带入到 root 所配置的目录中
        # 也就是说 nginx 会组合 root 和 location 的路径
        # 例如: http://localhost/root/test.html ==nginx读取的文件目录==> F:/_tmp/root/test.html
        # 
        # root: full path is appended to the root including the location part
        # alias: only the portion of the path NOT including the location part is appended to the alias
        # http://wiki.nginx.org/HttpCoreModule#alias
        location /root {
            # root 指定目录是上级目录
            # 一般情况下, 在 location / 中配置root, 在location /other 中配置 alias 是一个好习惯
            root   E:/_tmp;
            index  index.html;
        }
        # 配置 alias 才更像是指定根目录
        # 即去掉 location 对应的那部分才是需要拼接的目录和文件
        # http://localhost/alias/test.html => F:/_tmp/test.html
        location /alias {
            alias  E:/_tmp;
            index  index.html;
        }

        # 反向代理(外部机器通过网关访问网关后面服务器上的内容)后端接口
        location /proxy/ {
            # CORS 跨域设置
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Credentials true;
            add_header Access-Control-Allow-Methods GET,POST;

            # proxy_pass 带斜杠和不带斜杠是有区别的
            # http://www.amghost.cc/nginx-node-proxy_pass-setting/
            #
            # 带斜杠 -> with a URI: the location is replaced by the URI
            #           例如: location /proxy
            #                 proxy_pass http://localhost:8080/
            #
            #           proxy_pass 分解成两个部分: host "http://localhost:8080", URL "/"
            #           那么 http://localhost/proxy/a/index.jsp 转发到服务器上的请求
            #           先使用 URL "/"" 替代 location "/proxy"
            #           {http://localhost/proxy}/a/index.jsp => //a/index.jsp
            #           实际的服务器收到的请求为: {host}//a/index.jsp => http://localhost:8080//a/index.jsp
            #           但是我们发现服务器收到的请求的 URL 会多了一个斜杠, 这样有可能出现预想不到的问题
            #           以 JSP 为例
            #           getRequestURI: //a/index.jsp
            #           getRequestURL: http://localhost:8080//a/index.jsp
            # 
            #           因此注意 location 应该以斜杠结尾
            #           例如: location /proxy/
            #                 proxy_pass http://localhost:8080/
            #
            #           URI "/" host "http://localhost:8080" location "/proxy/"
            #           {http://localhost/proxy/}a/index.jsp => /a/index.jsp
            #           {host}/a/index.jsp => http://localhost:8080/a/index.jsp
            #           getRequestURI: /a/index.jsp
            #           getRequestURL: http://localhost:8080/a/index.jsp
            # 
            # 不带斜杠 -> without a URI: the request URI is passed to the server in the same form as sent by a client
            #             例如: location /proxy
            #                   proxy_pass http://localhost:8080
            #
            #             http://localhost/proxy/a/index.jsp
            #             服务器收到的请求为: http://localhost:8080/proxy/a/index.jsp
            #             getRequestURI: /proxy/a/index.jsp
            #             getRequestURL: http://localhost:8080/proxy/a/index.jsp
            proxy_pass http://localhost:8080/;  # with a URI
            # proxy_pass http://127.0.0.1:3000; # without a URI
            # proxy_pass http://apachephp/;     # 负载均衡

            # proxy_redirect     off;
            # proxy_set_header Referer http://domain.com;
            # [nginx内置预定义变量](http://www.nginx.cn/273.html)
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 允许客户端请求的最大单文件字节数
            # client_max_body_size 10m;
            # 缓冲区代理缓冲用户端请求的最大字节数
            # client_body_buffer_size 128k;
            # nginx跟后端服务器连接超时时间(代理连接超时)
            # proxy_connect_timeout 90;
            # 后端服务器数据回传时间(代理发送超时)
            # proxy_send_timeout 90;
            # 连接成功后, 后端服务器响应时间(代理接收超时)
            # proxy_read_timeout 90;
            # proxy_buffering on;
            # proxy_cache_valid any 10m;
            # proxy_cache_path /data/cache levels=1:2 keys_zone=my-cache:8m max_size=1000m inactive=600m;
            # proxy_temp_path /data/temp;
            # proxy_cache my-cache;
            # proxy_cache_valid 200;
            # 设置代理服务器(nginx)保存用户头信息的缓冲区大小
            # proxy_buffer_size 4k;
            # 缓冲区, 网页平均在32k以下的话, 这样设置
            # proxy_buffers 4 32k;
            # 高负荷下缓冲大小(proxy_buffers * 2)
            # proxy_busy_buffers_size 64k;
            # 设定缓存文件夹大小，大于这个值，将从upstream服务器传
            # proxy_temp_file_write_size 64k;
            # proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        # 重定向配置
        # [Nginx区分PC或手机访问不同网站](http://www.nginx.cn/784.html)
        location /rewrite {
            rewrite ^.+ http://baidu.com$uri;
        }

        # 禁止访问某个目录
        location /dirdeny {
            deny all;
            return 404;
        }

        #error_page  404              /404.html;

        # 定义错误提示页面
        # redirect server error pages to the static page /50x.html
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # 查看 nginx 状态
        location /nginx-status {
            stub_status on;
            access_log  on;
            auth_basic  "nginx-status";
            auth_basic_user_file htpasswd;
        }

        # 静态文件，nginx自己处理
        # 由于默认下载的 nginx window 版没有包含 Module ngx_http_headers_module, 设置后会造成静态资源无法加载 404 Not Found
        # 在 openresty 下可以设置 expires
        # [nginx防盗链](http://www.nginx.cn/657.html)
        # location ~* \.(css|js|png|jpg|gif)$ {
            # 静态文件不怎么更新，过期可以设大一点，
            # 如果频繁更新，则可以设置得小一点。
            # expires 1y;
        # }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    # server_name 配合 hosts 修改, 支持同一个端口下多个域名(即虚拟主机 vhost 配置)
    # C:\Windows\System32\drivers\etc
    # 192.168.198.130 a.domain.net
    # 192.168.198.130 b.domain.net
    server {
        listen 80;
        server_name a.domain.net;
        location / {
            root E:/site1;
        }
    }
    server {
        listen 80;
        server_name b.domain.net;
        location / {
            root E:/site2;
        }
    }

    # [nginx rewrite重写非www前缀域名到www前缀域名](http://www.nginx.cn/680.html)
    #server {
    #    server_name www.domain.com;
    #    return 301 $scheme://domain.com$request_uri;
    #}

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    server {
        listen       443 ssl;
        server_name  localhost;

        # 自己颁发证书
        # http://www.cnblogs.com/tintin1926/archive/2012/07/12/2587311.html
        # openssl 安装了 git 就会在 git/mingw64/bin 目录中有
        # openssl genrsa -des3 -out server.key 1024
        # openssl req -new -key server.key -out server.csr
        # openssl rsa -in server.key -out server_nopwd.key
        # openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt
        # 由于自签名的证书浏览器是不会信任的, 需要先随便访问一个文件(例如 https://IP/a.js),
        # 让浏览器提示你继续, 这样你才能访问正常的访问其他 https 内容,
        # 注意不管是移动端还是 PC 端都需要这样操作
        ssl_certificate      server.crt;
        ssl_certificate_key  server_nopwd.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            # root   html;
            # index  index.html index.htm;
            # 代理 weinre 让其支持 https, 这样 https 的网站你也可以使用 weinre 来调试了
            proxy_pass http://localhost:9001/;
        }
    }

}
